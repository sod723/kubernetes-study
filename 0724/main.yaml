# http://www.test.pri/shop -> shop 디플로이가 서비스 한다
apiVersion: apps/v1
kind: Deployment
metadata:
  name: main-deploy
spec:
  replicas: 2
  selector:
    matchLabels:
      page: main        # 어떤 라벨 부착된 Pod 에게 전달할 것인가?(1)
  template:     # Pod 정의
    metadata:
      name: main-pod
      labels:
        page: main      # (1) 과 동일해야 함
    spec:
      containers:
      - name: main-ctn
        image: sod723/my-httpd
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "16Mi"
            cpu: "500m"
          limits:
            memory: "32Mi"
            cpu: "1"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shop-deploy
spec:
  replicas: 3
  selector:
    matchLabels:
      page: shop        # 어떤 라벨 부착된 Pod 에게 전달할 것인가?(1)
  template:     # Pod 정의
    metadata:
      name: shop-pod
      labels:
        page: shop      # (1) 과 동일해야 함
    spec:
      containers:
      - name: shop-ctn
        image: brian24/rapa:shop
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "32Mi"
            cpu: "250m"
          limits:
            memory: "64Mi"
            cpu: "500m"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blog-deploy
spec:
  replicas: 1
  selector:
    matchLabels:
      page: blog        
  template:     # Pod 정의
    metadata:
      name: blog-pod
      labels:
        page: blog    
    spec:
      containers:
      - name: blog-ctn
        image: brian24/rapa:blog
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "32Mi"
            cpu: "500m"
          limits:
            memory: "64Mi"
            cpu: "1"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cafe-deploy
spec:
  replicas: 2
  selector:
    matchLabels:
      page: cafe        
  template:     # Pod 정의
    metadata:
      name: cafe-pod
      labels:
        page: cafe    
    spec:
      containers:
      - name: cafe-ctn
        image: brian24/rapa:cafe
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "16Mi"
            cpu: "250m"
          limits:
            memory: "32Mi"
            cpu: "500m"
#Main Service
---
apiVersion: v1
kind: Service
metadata:
  name: main-svc
spec:
  selector:
    page: main
  ports:
  - port: 80
#Shop Service
---
apiVersion: v1
kind: Service
metadata:
  name: shop-svc
spec:
  selector:
    page: shop
  ports:
  - port: 80    # svc 포트

---
apiVersion: v1
kind: Service
metadata:
  name: blog-svc
spec:
  selector:
    page: blog
  ports:
  - port: 80
---
apiVersion: v1
kind: Service
metadata:
  name: cafe-svc
spec:
  selector:
    page: cafe
  ports:
  - port: 80


#Ingress
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-web
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx # 기본적으로 클러스터에는 1개의 ingress 가 구성된다. 만약 회사별로 별도의 경로 설정을 하고 싶다면 ingressclassname 을 각기 따로 두고 구성하면 회사별로 별도의 ingress 구성이 가능하다
  rules:
  - host: www.test.pri
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: main-svc
            port:
              number: 80
      - path: /shop
        pathType: Prefix
        backend:
          service:
            name: shop-svc
            port:
              number: 80
			- path: /blog
			        pathType: Prefix
			        backend:
			          service:
			            name: blog-svc
			            port:
			              number: 80
			- path: /cafe
			        pathType: Prefix
			        backend:
			          service:
			            name: cafe-svc
			            port:
			              number: 80
